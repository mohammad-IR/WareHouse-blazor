@page "/currency/edit/{Id:int}"
@using WareHouse.Helper
@using WareHouse.Models.CurrenciesPrice

@inject ApplicationDbContext _db
@inject IJSRuntime _JsRunTime
@inject NavigationManager _NavManager

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm Model="Currency" OnInvalidSubmit="NotValidSubmit" OnValidSubmit="Submited" class="border rounded rounded-2 bg-light p-3">
            <DataAnnotationsValidator/>
            <div class="mb-3">
              <label for="formGroupExampleInput" class="form-label">نوع</label>
              <InputText class="form-control" @bind-Value="Currency.Type"></InputText>
              <ValidationMessage For="()=>Currency.Type"></ValidationMessage>

            </div>
            <div class="mb-3">
              <label  class="form-label">ارزش ریالی</label>
              <InputNumber class="form-control" @bind-Value="Currency.RialValue"></InputNumber>
              <ValidationMessage For="()=>Currency.RialValue"></ValidationMessage>
            </div>
            <div class="mb-3">
                <button class="form-group btn btn-primary" type="submit">ثبت</button>
            </div>
        </EditForm>
    </div>
</div>


@test
@code {
    [Parameter]
    public int Id { get; set; }
    private string test { get; set; } = "before test";
    private CurrencyPrice Currency { get; set; } = new CurrencyPrice();

    protected async override Task OnInitializedAsync()
    {
        Currency = _db.CurrenciesPrice.FirstOrDefault(item => item.Id == Id);
        if (Currency == null)
        {
            await _JsRunTime.ToastrError("یافت نشد");
            _NavManager.NavigateTo("/currency/list");
        }
        Task.Delay(100);
    }
    private async Task Submited()
    {
        try
        {
            test = "قبل ااز dd";
            _db.CurrenciesPrice.Update(Currency);
            await _db.SaveChangesAsync();
            await _JsRunTime.ToastrSuccess("با موفیت ثبت شد");
            _NavManager.NavigateTo("/currency/list");
        }
        catch
        {
            await _JsRunTime.ToastrError("مشکل در ثبت رکورد در دیتابیس هست");
        }
        await Task.Delay(100);
    }
    private async Task NotValidSubmit()
    {
        await _JsRunTime.ToastrError("ورودی ها مجاز نیستند");
        await Task.Delay(100);
        
    }

}
