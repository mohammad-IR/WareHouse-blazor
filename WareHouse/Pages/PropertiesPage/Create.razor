@page "/property/create"
@inject ApplicationDbContext _db
@inject IJSRuntime _JsRunTime
@inject NavigationManager _NavManager
@using WareHouse.Helper
@using WareHouse.Utilities
@using WareHouse.Models.RawMaterials


<div class="row text-center">
    <dvi class="col-12 mb-3">
            <span class="text-danger">@customError</span>
    </dvi>
    <EditForm Model="Prop" class="col-6 offset-3 border rounded rounded-2 p-4 bg-light shadow " OnSubmit="UpsertProp">
        <div class="mb-3 mx-2 text-start">
            <label  class="form-label ">نام</label>
            <InputText class="form-control" @bind-Value="Prop.Name"></InputText>
            <ValidationMessage For="()=>Prop.Name"></ValidationMessage>
        </div>
        <div class="mb-3 mx-2 ">
            <InputSelect @onchange="changeMode" class="form-select" @bind-Value="Prop.Type">
                <option selected>نوع ورودی را وارد کنید</option>
                @foreach(var item in PropertyUtitlies.ListTypes)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>Prop.Type"></ValidationMessage>

        </div>
        @if(Prop.Type == PropertyUtitlies.Drapdown){
            <div class="mb-3 mx-2">
                <label for="attributeId" class="form-label">ویژگی ها</label>
                <div class="d-flex">
                    <input @bind-value="attribute" id="attributeId" class="form-control mx-2" />
                    <button @onclick="changeMode" type="button" class="btn btn-outline-success">ثبت</button>
                </div>
            </div>
            <div class="mb-3 mx-2 d-flex">
                @foreach(var item in ListOfattribute)
                {
                    <div class="col-2 border bg-dark text-white-50 rounded m-1 shadow">@item
                    <button type="button" @onclick="()=>DeleteElement(item)"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                      <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                    </svg></button>
                    </div>
                }
            </div>
        }
        <button type="submit" class="btn btn-primary text-white">ثبت</button>
    </EditForm>
</div>



@code{
    private List<string> ListOfattribute { get; set; } = new List<string>();
    private string attribute { get; set; } = "";
    private Property Prop = new Property();
    private string customError = "";

    private async Task UpsertProp()
    {
        try
        {
            if ( Prop.Type == PropertyUtitlies.Drapdown)
            {
                if(ListOfattribute.Count != 0){
                    _db.Properties.Add(Prop);
                    await _db.SaveChangesAsync();
                    try
                    {
                        foreach (var item in ListOfattribute)
                        {
                            _db.AttributesProperties.Add(new AttributesProperty()
                                {
                                    IdProperty = Prop.Id,
                                    Name = item,
                                });
                            await _db.SaveChangesAsync();
                        }
                        await _db.SaveChangesAsync();
                        await _JsRunTime.ToastrSuccess("با موفقیت ثبت شد");
                        _NavManager.NavigateTo("/property/list");

                    }
                    catch (Exception e)
                    {
                        //customError = e.ToString();
                        customError = ("در ثبت ویژگی ها در دیتابیس مشکل خوردیم");
                        _db.Properties.Remove(Prop);
                    } 
                }
                else
                {
                    customError = ("باید در لیست ویژگی حداقل یک موجودی داشته باشید");
                }
            }
            else
            {
                _db.Properties.Add(Prop);
                await _db.SaveChangesAsync();
                await _JsRunTime.ToastrSuccess("با موفقیت ثبت شد");
                _NavManager.NavigateTo("/property/list");
            }

        }
        catch (Exception e)
        {
            customError = "یک نام دیگر وارد کنید";
            await _JsRunTime.ToastrError("مشکلی پیش امده");
        }
        await Task.Delay(1000);
    }
    private void changeMode()
    {
        if (attribute.Trim() != "")
        {
            ListOfattribute.Add(attribute);
            attribute = "";
        }
    }
    private void DeleteElement(string element)
    {
        ListOfattribute.Remove(element);
    }
}